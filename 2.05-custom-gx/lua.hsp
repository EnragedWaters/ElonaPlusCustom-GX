#ifdef CUSTOM_GX_LUA

#define ctype pushEnum(%1)    hl_pushinteger %1 : hl_setfield -2, "%1"
#define ctype pushDim(%1)    hl_pushdim %1 : hl_setfield -2, "%1"

; HSP has no way to unwind the subroutine stack from the SDK, so there is no
; way to make pushed subroutines work with Lua's error handling. Instead,
; return two values containing the result and error, or nil if one is absent.
;
; None of the functions in this module can raise Lua errors, or there will be
; crashes. (Lua errors raised outside code jumped to by `gosub` are fine,
; however.)
#define ctype luaError(%1) hl_pushnil : hl_pushstring %1 : return 2

*lua_init
    proc "Lua init"
    luafile=""

    hl_newstate 0
    hl_switchstate 0

    hl_getglobal "package"
    hl_pushstring exedir + "lua\\?.lua"
    hl_setfield -2, "path"
    hl_pop

    gosub *lua_push_hsp

    initfile@lua = exeDir + "lua\\init.lua"
    exist initfile@lua
    if ( strsize != (-1) ) {
    	ret=hl_dofile(initfile@lua)
    	if ret = 1 {
    	    s = hl_tostring(-1)
    	    dialog s
    	}
    }

    proc "Lua init:dofile"
    return

*lua_run
    proc "Lua run"
    ret=hl_dofile(exeDir+luafile)
    if ret = 1 {
        s = hl_tostring(-1)
        dialog s
    }
    goto *exit_game

*lua_push_hsp
    proc "Lua push"

    gosub *lua_make_hsp
    gosub *lua_make_elona

    proc "Lua push:done"
    return

*lua_make_hsp
    hl_getglobal "_G"

    hl_pushfunction *lua_hsp_logmes
    hl_setfield -2, "logmes"

    hl_pushfunction *lua_hsp_dialog
    hl_setfield -2, "dialog"

    hl_pushfunction *lua_hsp_noteadd
    hl_setfield -2, "noteadd"

    hl_pushfunction *lua_hsp_assert
    hl_setfield -2, "assert"

    hl_pushfunction *lua_hsp_randomize
    hl_setfield -2, "randomize"

    hl_pushfunction *lua_hsp_rnd
    hl_setfield -2, "rnd"

    hl_pushfunction *lua_hsp_getvar
    hl_setfield -2, "getvar"

    hl_pushfunction *lua_hsp_setvar
    hl_setfield -2, "setvar"

    hl_pop
    return

*lua_hsp_logmes
    logmes hl_tolstring(1)
    return 0

*lua_hsp_dialog
    dialog hl_tolstring(1)
    return 0

*lua_hsp_noteadd
    noteadd hl_tolstring(1)
    return 0

*lua_hsp_assert
	p(0)=hl_toboolean(1)
    assert p(0)
    return 0

*lua_hsp_randomize
    if hl_gettop() == 0 {
        randomize
    } else {
        if ( hl_isinteger(1) ) {
            p = hl_tointeger(1)
            randomize p
        }
    }
    luaError("Invalid argument type")

*lua_hsp_rnd
    if hl_gettop() < 1 {
        luaError("Invalid argument count")
    }
    if hl_isinteger(1) {
        p = hl_tointeger(1)
        p = rnd(p)
        hl_pushinteger p
        return 1
    }
    luaError("Invalid argument type")

*lua_hsp_getvar
    if hl_gettop() < 1 {
        luaError("Invalid argument count")
    }
    s = hl_tolstring(1)
	v = hl_seekvar(s)
    if stat == -1 {
        return 0
    }
    hl_pushhspvalue v
    return 1

*lua_hsp_setvar
    if hl_gettop() < 2 {
        luaError("Invalid argument count")
    }
    s = hl_tolstring(1)
    v = hl_tohspvalue(2)
	hl_setvar s, v
    if stat == -1 {
        hl_pushboolean FALSE
    }
    else {
        hl_pushboolean TRUE
    }
    return 1

*lua_make_elona
    hl_getglobal "_G"

    gosub *lua_elona_push_enums

    hl_pushfunction *lua_elona_txt
    hl_setfield -2, "txt"

    hl_pushfunction *lua_elona_txtEf
    hl_setfield -2, "txtEf"

    hl_pushfunction *lua_elona_itemname
    hl_setfield -2, "itemname"

    hl_pushfunction *lua_elona_cnvitemname
    hl_setfield -2, "cnvitemname"

    hl_pushfunction *lua_elona_flt
    hl_setfield -2, "flt"

    hl_pushfunction *lua_elona_characreate
    hl_setfield -2, "characreate"

    hl_pushfunction *lua_elona_chara_vanquish
    hl_setfield -2, "chara_vanquish"

    hl_pushfunction *lua_elona_itemcreate
    hl_setfield -2, "itemcreate"

    hl_pushfunction *lua_elona_item_delete
    hl_setfield -2, "item_delete"

    hl_pushfunction *lua_elona_add_ally
    hl_setfield -2, "add_ally"

    hl_pushfunction *lua_elona_advance_hour
    hl_setfield -2, "advance_hour"

    hl_pushfunction *lua_elona_fltChara
    hl_setfield -2, "fltChara"

    pushDim(cdata)
    pushDim(mdata)
    pushDim(cdatan)
    pushDim(mdatan)
    pushDim(sdata)
    pushDim(spact)
    pushDim(inv)
    pushDim(mat)
    pushDim(gdata)
    pushDim(adata)
    pushDim(qdata)
    pushDim(qname)
    pushDim(gdatan)
    pushDim(spell)
    pushDim(map)
    pushDim(dblist)

    hl_pop
    return

*lua_elona_push_enums
	pushEnum(CHAR_STATE_DEAD)
	pushEnum(CHAR_STATE_ALIVE)
	pushEnum(CHAR_STATE_SPIRIT)
	pushEnum(CHAR_STATE_ADV)
	pushEnum(CHAR_STATE_ADV_HOSPITAL)
	pushEnum(CHAR_STATE_ADV_DEAD)
	pushEnum(CHAR_STATE_ALLY_DEAD)
	pushEnum(CHAR_STATE_ALLY_WAIT)
	pushEnum(CHAR_STATE_SUSPEND)
	pushEnum(CHAR_STATE_ALLY_WORK)
	pushEnum(CHAR_STATE_TEMP)

	pushEnum(RELATION_ALLY)
	pushEnum(RELATION_NEUTRAL)
	pushEnum(RELATION_DISLIKE)
	pushEnum(RELATION_HATE)
	pushEnum(RELATION_ENEMY)

	pushEnum(COLOR_DEFAULT)
	pushEnum(COLOR_RANDOM)
	pushEnum(COLOR_GREEN)
	pushEnum(COLOR_RED)
	pushEnum(COLOR_BLUE)
	pushEnum(COLOR_YELLOW)
	pushEnum(COLOR_BROWN)
	pushEnum(COLOR_BLACK)
	pushEnum(COLOR_PURPLE)
	pushEnum(COLOR_SKY_BLUE)
	pushEnum(COLOR_PINK)
	pushEnum(COLOR_ORANGE)
	pushEnum(COLOR_WHITE)
	pushEnum(COLOR_FRESH)
	pushEnum(COLOR_DARK_GREEN)
	pushEnum(COLOR_GRAY)
	pushEnum(COLOR_LIGHT_RED)
	pushEnum(COLOR_LIGHT_BLUE)
	pushEnum(COLOR_LIGHT_PURPLE)
	pushEnum(COLOR_LIGHT_GREEN)
	pushEnum(COLOR_TALK)
	pushEnum(COLOR_LIGHT_BLUE2)
	pushEnum(COLOR_RED2)
	pushEnum(COLOR_LIME)
	pushEnum(COLOR_DARK_GRAY)
	pushEnum(COLOR_YELLOW2)
	pushEnum(COLOR_LIGHT_BROWN)
	pushEnum(COLOR_PURPLE2)
	pushEnum(COLOR_DARK_GRAY2)
	pushEnum(COLOR_DARK_GRAY3)

	pushEnum(CONDITION_POISON)
	pushEnum(CONDITION_SLEEP)
	pushEnum(CONDITION_PARALYZE)
	pushEnum(CONDITION_BLIND)
	pushEnum(CONDITION_CONFUSE)
	pushEnum(CONDITION_FEAR)
	pushEnum(CONDITION_DIM)
	pushEnum(CONDITION_DRUNK)
	pushEnum(CONDITION_BLEED)
	pushEnum(CONDITION_WET)
	pushEnum(CONDITION_INSANE)
	pushEnum(CONDITION_SICK)

	pushEnum(ROLE_NONE)
	pushEnum(ROLE_SHOPKEEPER)
	pushEnum(ROLE_CHEF)
	pushEnum(ROLE_SPECIAL)
	pushEnum(ROLE_CITIZEN)
	pushEnum(ROLE_IDENTIFIER)
	pushEnum(ROLE_MAYOR)
	pushEnum(ROLE_TRAINER)
	pushEnum(ROLE_INFORMER)
	pushEnum(ROLE_BARTENDER)
	pushEnum(ROLE_ARENA_MASTER)
	pushEnum(ROLE_PET_ARENA_MASTER)
	pushEnum(ROLE_HEALER)
	pushEnum(ROLE_ADVENTURER)
	pushEnum(ROLE_GUARD)
	pushEnum(ROLE_KING)
	pushEnum(ROLE_SHOP_GUARD)
	pushEnum(ROLE_SLAVER)
	pushEnum(ROLE_MAID)
	pushEnum(ROLE_SISTER)
	pushEnum(ROLE_USER)
	pushEnum(ROLE_RETURNER)
	pushEnum(ROLE_HORSE_MASTER)
	pushEnum(ROLE_CARAVAN_MASTER)
	pushEnum(ROLE_BOUNTY_HUNTER)

	pushEnum(ROLE_SHOP_WEAPON)
	pushEnum(ROLE_SHOP_ARMOR)
	pushEnum(ROLE_SHOP_FOOD)
	pushEnum(ROLE_SHOP_BAKERY)
	pushEnum(ROLE_SHOP_MAGIC)
	pushEnum(ROLE_SHOP_INN)
	pushEnum(ROLE_SHOP_GENERAL)
	pushEnum(ROLE_SHOP_BLACKMARKET)
	pushEnum(ROLE_SHOP_GOODS)
	pushEnum(ROLE_SHOP_TRADE)
	pushEnum(ROLE_SHOP_WANDER)
	pushEnum(ROLE_SHOP_SALESPERSON)
	pushEnum(ROLE_SHOP_OFFICE)
	pushEnum(ROLE_SHOP_DEED)
	pushEnum(ROLE_SHOP_FISH)
	pushEnum(ROLE_SHOP_NOYEL)
	pushEnum(ROLE_SHOP_MIROK)
	pushEnum(ROLE_SHOP_MOUNTAIN1)
	pushEnum(ROLE_SHOP_MOUNTAIN2)
	pushEnum(ROLE_SHOP_SISTER)
	pushEnum(ROLE_SHOP_BOOK_RESERVE)
	pushEnum(ROLE_SHOP_THIEF)
	pushEnum(ROLE_SHOP_FESTIVAL)
	pushEnum(ROLE_SHOP_STOKE)
	pushEnum(ROLE_SHOP_MOYER)
	pushEnum(ROLE_GUEST_HALLOWEEN)

	pushEnum(ROLE_GUEST_BEGGAR)
	pushEnum(ROLE_GUEST_SEX)
	pushEnum(ROLE_GUEST_CITIZEN)
	pushEnum(ROLE_GUEST_MERCHANT)
	pushEnum(ROLE_GUEST_CRITIC)
	pushEnum(ROLE_GUEST_TRAINER)
	pushEnum(ROLE_GUEST_PRODUCER)
	pushEnum(MAX_ROLE_GUEST)

    return

*lua_elona_txt
    if hl_gettop() < 1 {
        luaError("Wrong number of arguments")
    }
    if hl_isstring(1) {
        txt hl_tostring(1)
        return 0
    }
    luaError("Invalid arguments")

*lua_elona_txtEf
    if hl_gettop() < 1 {
        luaError("Wrong number of arguments")
    }
    if hl_isinteger(1) {
        txtEf hl_tointeger(1)
        return 0
    }
    luaError("Invalid arguments")

*lua_elona_itemname
    if hl_gettop() < 1 {
        luaError("Wrong number of arguments")
    }
    if hl_isinteger(1) {
        ci = hl_tointeger(1)
        s = itemname(ci)
        hl_pushstring s
        return 1
    }
    luaError("Invalid arguments")

*lua_elona_cnvitemname
    if hl_gettop() < 1 {
        luaError("Wrong number of arguments")
    }
    if hl_isinteger(1) {
        ci = hl_tointeger(1)
        s = cnvitemname(ci)
        hl_pushstring s
        return 1
    }
    luaError("Invalid arguments")

*lua_elona_flt
    locvar_objlv = 0
    locvar_qualitylv = 0
    if hl_isinteger(1) {
        locvar_objlv = hl_tointeger(1)
    }
    if hl_isinteger(2) {
        locvar_qualitylv = hl_tointeger(2)
    }
    flt locvar_objlv, locvar_qualitylv
    return 0

*lua_elona_characreate
    if hl_gettop() < 1 {
        luaError("Wrong number of arguments")
    }
    if hl_isinteger(1) {
        dbid = hl_tointeger(1)
    } else {
        luaError("Invalid arguments")
    }
    if hl_gettop() >= 2 & hl_isinteger(2) {
        x = hl_tointeger(2)
    } else {
        x = -3
    }
    if hl_gettop() >= 3 & hl_isinteger(3) {
        y = hl_tointeger(3)
    } else {
        y = 0
    }
    characreate -1, dbid, x, y
    hl_pushinteger(rc)
    return 1

*lua_elona_chara_vanquish
    if hl_gettop() < 1 {
        luaError("Wrong number of arguments")
    }
    if hl_isinteger(1) {
        locvar_tc = hl_tointeger(1)
    } else {
        luaError("Invalid arguments")
    }
    chara_vanquish locvar_tc
    return 0

*lua_elona_itemcreate
    if hl_gettop() < 1 {
        luaError("Wrong number of arguments")
    }
    if hl_isinteger(1) {
        dbid = hl_tointeger(1)
    } else {
        luaError("Invalid arguments")
    }
    if hl_gettop() >= 2 & hl_isinteger(2) {
        x = hl_tointeger(2)
    } else {
        x = cdata(CDATA_X, CHARA_PLAYER)
    }
    if hl_gettop() >= 3 & hl_isinteger(3) {
        y = hl_tointeger(3)
    } else {
        y = cdata(CDATA_Y, CHARA_PLAYER)
    }
    if hl_gettop() >= 4 & hl_isinteger(4) {
        amount = hl_tointeger(4)
    } else {
        amount = 0
    }
    if hl_gettop() >= 5 & hl_isinteger(5) {
        rc = hl_tointeger(5)
    } else {
        rc = -1
    }
    itemcreate rc, dbid, x, y, amount
    hl_pushinteger(ci)
    return 1

*lua_elona_item_delete
    if hl_gettop() < 1 {
        luaError("Wrong number of arguments")
    }
    if hl_isinteger(1) {
        locvar_ci = hl_tointeger(1)
    } else {
        luaError("Invalid arguments")
    }
    item_delete locvar_ci
    return 0

*lua_elona_add_ally
    if hl_gettop() < 1 {
        luaError("Wrong number of arguments")
    }
    if hl_isinteger(1) {
        rc = hl_tointeger(1)
    } else {
        luaError("Invalid arguments")
    }
    gosub *add_ally
    return 0

*lua_elona_advance_hour
    if hl_gettop() >= 1 & hl_isinteger(1) {
        i = limit(hl_tointeger(1), 1, 10000)
    } else {
        i = 1
    }
	repeat i
		gdata(GDATA_HOUR)++
		gosub *advance_hour
	loop
	return 0

*lua_elona_fltChara
    gosub *fltChara
	return 0

#endif
